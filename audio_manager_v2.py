#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏ —Ä—É–º—ã–Ω—Å–∫–∏—Ö —É—Ä–æ–∫–æ–≤
"""

import os
import json
from pathlib import Path

AUDIO_DIR = "audio"

def load_lesson_data(lesson_file):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞"""
    try:
        with open(lesson_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {lesson_file}: {e}")
        return None

def get_directory_size(path):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏ –≤ MB"""
    total_size = 0
    for dirpath, dirnames, filenames in os.walk(path):
        for filename in filenames:
            filepath = os.path.join(dirpath, filename)
            total_size += os.path.getsize(filepath)
    return total_size / (1024 * 1024)

def show_stats():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤:")
    print("=" * 50)
    
    audio_dir = Path(AUDIO_DIR)
    if not audio_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ audio –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
        
    audio_files = [f for f in os.listdir(AUDIO_DIR) if f.endswith('.mp3')]
    print(f"–í—Å–µ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤: {len(audio_files)}")
    print(f"–†–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏ audio: {get_directory_size(AUDIO_DIR):.1f} MB")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–∫–∞–º
    lesson_files = [f for f in os.listdir('.') if f.startswith('lesson') and f.endswith('.json')]
    
    total_expected = 0
    total_existing = 0
    
    for lesson_file in sorted(lesson_files):
        lesson_num = lesson_file.replace('lesson', '').replace('.json', '')
        lesson_data = load_lesson_data(lesson_file)
        
        if lesson_data:
            words_count = len(lesson_data.get('words', []))
            dialogs_phrases = sum(len(dialog) for dialog in lesson_data.get('dialogs', []))
            expected = words_count + dialogs_phrases
            total_expected += expected
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è —É—Ä–æ–∫–∞
            existing = 0
            for word in lesson_data.get('words', []):
                if os.path.exists(os.path.join(AUDIO_DIR, word['audio'])):
                    existing += 1
            
            for dialog in lesson_data.get('dialogs', []):
                for phrase in dialog:
                    if os.path.exists(os.path.join(AUDIO_DIR, phrase['audio'])):
                        existing += 1
            
            total_existing += existing
            completion = (existing / expected * 100) if expected > 0 else 0
            
            lesson_titles = {
                "1": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", 
                "2": "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ", 
                "3": "–ß–∏—Å–ª–∞ –∏ –≤—Ä–µ–º—è"
            }
            lesson_title = lesson_titles.get(lesson_num, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–∫")
            
            print(f"\n–£—Ä–æ–∫ {lesson_num}: {lesson_title}")
            print(f"  –°–ª–æ–≤–∞: {words_count}")
            print(f"  –§—Ä–∞–∑—ã –¥–∏–∞–ª–æ–≥–æ–≤: {dialogs_phrases}")
            print(f"  –ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ: {existing}/{expected} ({completion:.1f}%)")
            
            if completion < 100:
                print(f"  ‚ö† –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {expected - existing} —Ñ–∞–π–ª–æ–≤")
    
    overall_completion = (total_existing / total_expected * 100) if total_expected > 0 else 0
    print(f"\nüìà –û–±—â–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {total_existing}/{total_expected} ({overall_completion:.1f}%)")

def check_audio_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤")
    print("=" * 40)
    
    audio_dir = Path(AUDIO_DIR)
    if not audio_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ audio –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    existing_files = set(f.name for f in audio_dir.glob("*.mp3"))
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤
    needed_files = set()
    lesson_files = sorted([f for f in os.listdir('.') if f.startswith('lesson') and f.endswith('.json')])
    
    for lesson_file in lesson_files:
        lesson_data = load_lesson_data(lesson_file)
        if lesson_data:
            # –§–∞–π–ª—ã –∏–∑ —Å–ª–æ–≤
            if 'words' in lesson_data:
                for word in lesson_data['words']:
                    if 'audio' in word:
                        needed_files.add(word['audio'])
            
            # –§–∞–π–ª—ã –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤
            if 'dialogs' in lesson_data:
                for dialog in lesson_data['dialogs']:
                    for phrase in dialog:
                        if 'audio' in phrase:
                            needed_files.add(phrase['audio'])
    
    missing_files = needed_files - existing_files
    extra_files = existing_files - needed_files
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –ù—É–∂–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(needed_files)}")
    print(f"   –ï—Å—Ç—å —Ñ–∞–π–ª–æ–≤: {len(existing_files)}")
    print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {len(missing_files)}")
    print(f"   –õ–∏—à–Ω–∏—Ö: {len(extra_files)}")
    
    if missing_files:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã ({len(missing_files)}):")
        for file in sorted(missing_files)[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            print(f"   - {file}")
        if len(missing_files) > 10:
            print(f"   ... –∏ –µ—â–µ {len(missing_files) - 10} —Ñ–∞–π–ª–æ–≤")
    
    if extra_files:
        print(f"\n‚ö† –õ–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã ({len(extra_files)}):")
        for file in sorted(extra_files)[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            print(f"   - {file}")
        if len(extra_files) > 10:
            print(f"   ... –∏ –µ—â–µ {len(extra_files) - 10} —Ñ–∞–π–ª–æ–≤")
    
    if not missing_files and not extra_files:
        print(f"\n‚úÖ –í—Å–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ!")

def list_audio_files():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""
    
    audio_dir = Path(AUDIO_DIR)
    if not audio_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ audio –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    files = sorted(audio_dir.glob("*.mp3"))
    
    print(f"üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã ({len(files)} —à—Ç.):")
    print("=" * 40)
    
    for file in files:
        size_kb = file.stat().st_size // 1024
        print(f"   {file.name} ({size_kb} KB)")

def clean_unused_audio():
    """–£–¥–∞–ª—è–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã"""
    
    audio_dir = Path(AUDIO_DIR)
    if not audio_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ audio –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    existing_files = {f.name: f for f in audio_dir.glob("*.mp3")}
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    needed_files = set()
    lesson_files = sorted([f for f in os.listdir('.') if f.startswith('lesson') and f.endswith('.json')])
    
    for lesson_file in lesson_files:
        lesson_data = load_lesson_data(lesson_file)
        if lesson_data:
            if 'words' in lesson_data:
                for word in lesson_data['words']:
                    if 'audio' in word:
                        needed_files.add(word['audio'])
            
            if 'dialogs' in lesson_data:
                for dialog in lesson_data['dialogs']:
                    for phrase in dialog:
                        if 'audio' in phrase:
                            needed_files.add(phrase['audio'])
    
    # –ù–∞—Ö–æ–¥–∏–º –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã
    extra_files = set(existing_files.keys()) - needed_files
    
    if not extra_files:
        print("‚úÖ –õ–∏—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    print(f"üóë –ù–∞–π–¥–µ–Ω–æ –ª–∏—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤: {len(extra_files)}")
    for filename in sorted(extra_files):
        print(f"   - {filename}")
    
    response = input("\n–£–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã? (y/N): ")
    if response.lower() == 'y':
        for filename in extra_files:
            file_path = existing_files[filename]
            file_path.unlink()
            print(f"üóë –£–¥–∞–ª–µ–Ω: {filename}")
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(extra_files)} —Ñ–∞–π–ª–æ–≤")
    else:
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")

def generate_missing_audio():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã"""
    print("üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤")
    print("–ó–∞–ø—É—Å–∫–∞–µ–º generate_audio.py...")
    
    import subprocess
    try:
        result = subprocess.run(['python', 'generate_audio.py'], check=True, capture_output=True, text=True)
        print(result.stdout)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        print(e.stderr)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª generate_audio.py –Ω–µ –Ω–∞–π–¥–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    
    print("üéµ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏ —Ä—É–º—ã–Ω—Å–∫–∏—Ö —É—Ä–æ–∫–æ–≤")
    print("=" * 50)
    print("1. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    print("2. üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã")
    print("3. üìÑ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤") 
    print("4. üóë –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ")
    print("5. üéµ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ")
    print("6. üö™ –í—ã—Ö–æ–¥")
    
    while True:
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-6): ").strip()
        
        if choice == '1':
            show_stats()
        elif choice == '2':
            check_audio_files()
        elif choice == '3':
            list_audio_files()
        elif choice == '4':
            clean_unused_audio()
        elif choice == '5':
            generate_missing_audio()
        elif choice == '6':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

if __name__ == "__main__":
    main()
