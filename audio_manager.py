#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏
"""

import os
import json
from pathlib import Path

def check_audio_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤")
    print("=" * 40)
    
    audio_dir = Path("audio")
    if not audio_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ audio –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    existing_files = set(f.name for f in audio_dir.glob("*.mp3"))
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤
    needed_files = set()
    lesson_files = sorted([f for f in os.listdir('.') if f.startswith('lesson') and f.endswith('.json')])
    
    for lesson_file in lesson_files:
        try:
            with open(lesson_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –§–∞–π–ª—ã –∏–∑ —Å–ª–æ–≤
            if 'words' in data:
                for word in data['words']:
                    if 'audio' in word:
                        needed_files.add(word['audio'])
            
            # –§–∞–π–ª—ã –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤
            if 'dialogs' in data:
                for dialog in data['dialogs']:
                    for phrase in dialog:
                        if 'audio' in phrase:
                            needed_files.add(phrase['audio'])
                            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {lesson_file}: {e}")
    
    missing_files = needed_files - existing_files
    extra_files = existing_files - needed_files
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –ù—É–∂–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(needed_files)}")
    print(f"   –ï—Å—Ç—å —Ñ–∞–π–ª–æ–≤: {len(existing_files)}")
    print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {len(missing_files)}")
    print(f"   –õ–∏—à–Ω–∏—Ö: {len(extra_files)}")
    
    if missing_files:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã ({len(missing_files)}):")
        for file in sorted(missing_files):
            print(f"   - {file}")
    
    if extra_files:
        print(f"\n‚ö† –õ–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã ({len(extra_files)}):")
        for file in sorted(extra_files):
            print(f"   - {file}")
    
    if not missing_files and not extra_files:
        print(f"\n‚úÖ –í—Å–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ!")

def list_audio_files():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""
    
    audio_dir = Path("audio")
    if not audio_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ audio –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    files = sorted(audio_dir.glob("*.mp3"))
    
    print(f"üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã ({len(files)} —à—Ç.):")
    print("=" * 40)
    
    for file in files:
        size_kb = file.stat().st_size // 1024
        print(f"   {file.name} ({size_kb} KB)")

def clean_unused_audio():
    """–£–¥–∞–ª—è–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã"""
    
    audio_dir = Path("audio")
    if not audio_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ audio –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    existing_files = {f.name: f for f in audio_dir.glob("*.mp3")}
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    needed_files = set()
    lesson_files = sorted([f for f in os.listdir('.') if f.startswith('lesson') and f.endswith('.json')])
    
    for lesson_file in lesson_files:
        try:
            with open(lesson_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            if 'words' in data:
                for word in data['words']:
                    if 'audio' in word:
                        needed_files.add(word['audio'])
            
            if 'dialogs' in data:
                for dialog in data['dialogs']:
                    for phrase in dialog:
                        if 'audio' in phrase:
                            needed_files.add(phrase['audio'])
                            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {lesson_file}: {e}")
    
    # –ù–∞—Ö–æ–¥–∏–º –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã
    extra_files = set(existing_files.keys()) - needed_files
    
    if not extra_files:
        print("‚úÖ –õ–∏—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    print(f"üóë –ù–∞–π–¥–µ–Ω–æ –ª–∏—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤: {len(extra_files)}")
    for filename in sorted(extra_files):
        print(f"   - {filename}")
    
    response = input("\n–£–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã? (y/N): ")
    if response.lower() == 'y':
        for filename in extra_files:
            file_path = existing_files[filename]
            file_path.unlink()
            print(f"üóë –£–¥–∞–ª–µ–Ω: {filename}")
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(extra_files)} —Ñ–∞–π–ª–æ–≤")
    else:
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")

def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    
    print("üéµ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏")
    print("=" * 30)
    print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã")
    print("2. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤") 
    print("3. –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ")
    print("4. –í—ã—Ö–æ–¥")
    
    while True:
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()
        
        if choice == '1':
            check_audio_files()
        elif choice == '2':
            list_audio_files()
        elif choice == '3':
            clean_unused_audio()
        elif choice == '4':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

if __name__ == "__main__":
    main()
