#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ —É—Ä–æ–∫–æ–≤
–∏—Å–ø–æ–ª—å–∑—É—è Google Text-to-Speech API
"""

import json
import os
import sys
from pathlib import Path

try:
    from gtts import gTTS
except ImportError:
    print("–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å gtts")
    print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install gtts")
    sys.exit(1)

def create_audio_directory():
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É audio –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    audio_dir = Path("audio")
    audio_dir.mkdir(exist_ok=True)
    return audio_dir

def generate_audio_for_text(text, filename, audio_dir, lang='ro', slow=False):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    
    Args:
        text (str): –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
        filename (str): –ò–º—è —Ñ–∞–π–ª–∞
        audio_dir (Path): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ audio
        lang (str): –Ø–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É–º—ã–Ω—Å–∫–∏–π)
        slow (bool): –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ—á—å
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç gTTS
        tts = gTTS(text=text, lang=lang, slow=slow)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        filepath = audio_dir / filename
        tts.save(str(filepath))
        
        print(f"‚úì –°–æ–∑–¥–∞–Ω: {filename}")
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {filename}: {e}")
        return False

def process_lesson_file(lesson_file):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª —É—Ä–æ–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ"""
    
    if not os.path.exists(lesson_file):
        print(f"–§–∞–π–ª {lesson_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É audio
    audio_dir = create_audio_directory()
    
    try:
        with open(lesson_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {lesson_file}: {e}")
        return False
    
    print(f"\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {lesson_file}")
    
    success_count = 0
    total_count = 0
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–æ–≤–∞
    if 'words' in data and data['words']:
        print(f"\nüéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–ª—è —Å–ª–æ–≤ ({len(data['words'])} —à—Ç.):")
        
        for word in data['words']:
            if 'ro' in word and 'audio' in word:
                total_count += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª
                audio_path = audio_dir / word['audio']
                if audio_path.exists():
                    print(f"‚ö† –§–∞–π–ª {word['audio']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    success_count += 1
                    continue
                
                if generate_audio_for_text(word['ro'], word['audio'], audio_dir):
                    success_count += 1
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
    if 'dialogs' in data and data['dialogs']:
        dialog_count = sum(len(dialog) for dialog in data['dialogs'])
        print(f"\nüí¨ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ ({dialog_count} —Ñ—Ä–∞–∑):")
        
        for dialog in data['dialogs']:
            for phrase in dialog:
                if 'ro' in phrase and 'audio' in phrase:
                    total_count += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª
                    audio_path = audio_dir / phrase['audio']
                    if audio_path.exists():
                        print(f"‚ö† –§–∞–π–ª {phrase['audio']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        success_count += 1
                        continue
                    
                    if generate_audio_for_text(phrase['ro'], phrase['audio'], audio_dir):
                        success_count += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    return success_count == total_count

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üéµ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä—É–º—ã–Ω—Å–∫–∏—Ö —É—Ä–æ–∫–æ–≤")
    print("=" * 50)
    
    # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã lesson*.json
    lesson_files = sorted([f for f in os.listdir('.') if f.startswith('lesson') and f.endswith('.json')])
    
    if not lesson_files:
        print("‚ùå –§–∞–π–ª—ã —É—Ä–æ–∫–æ–≤ (lesson*.json) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"üìö –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —É—Ä–æ–∫–æ–≤: {len(lesson_files)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
    print("\nüåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google TTS...")
    try:
        test_tts = gTTS(text="test", lang='ro')
        print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google TTS —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google TTS: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    total_success = True
    for lesson_file in lesson_files:
        success = process_lesson_file(lesson_file)
        total_success = total_success and success
    
    print("\n" + "=" * 50)
    if total_success:
        print("üéâ –í—Å–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö† –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å")
    
    print(f"\nüìÅ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É: ./audio/")

if __name__ == "__main__":
    main()
